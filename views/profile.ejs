<!-- views/profile.ejs -->
<!--
	<%= user.id %>  
	<%= user.username %> 
	<%= user.password %>
	<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css">
	<link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css">
-->

<html>
	<link rel="stylesheet" type="text/css" href="/src/css/player.css">
	<link rel="stylesheet" type="text/css" href="/src/css/image-picker.css">
	<script src="/socket.io/socket.io.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script src="/src/js/image-picker.min.js"></script>
	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
 	<script>
 		var profile = {
          	user_id : <%= user.id %>,
          	player_name : '<%= playerName %>',
          	player_id : <%= playerId %>
          };
        var currentPlayers = {};
	    var statsTable;
	    var socket = io();
	    google.charts.load('current', {'packages':['corechart']});
	    //load chart, the call create table
	    google.charts.setOnLoadCallback(createTable);

	    function createTable() {
	    	var chartData = [['test',40]];
	    	statsTable = new google.visualization.DataTable();
	      	statsTable.addColumn('string', 'eType');
		    statsTable.addColumn('number', 'Remaining');
		    connectToGame();
		    drawChart();
	    }

	    function connectToGame(){
	    	//join the party
	    	socket.emit('i wanna play',{user_id:profile['user_id'],player_id:profile['player_id']});
	    	//socket.emit('get curr player stats',profile);
	    }
	    function updateGTable(data) {
	    	  var chartData = [];
		      statsTable = new google.visualization.DataTable();
		      statsTable.addColumn('string', 'eType');
		      statsTable.addColumn('number', 'Remaining');
		      statsTable.addRows(data);
		      drawChart(data);
	    		}
	    function parseStats(data) {
	          	chartData = [
	          		['PE', data['PE']],
	          		['ME', data['ME']],
	          		['SE', data['SE']]
	          	];
	          	return chartData;
	          }
	    function drawChart() {
		    // Set chart options
		    var options = { 
						 	'legend':'none',
		               		'hAxis': {
							    'gridlines': {
							        'color': 'transparent'
							    }
							}
						};
		    // Instantiate and draw our chart, passing in some options.
		    var chart = new google.visualization.BarChart(document.getElementById('chartContainer'));
		    chart.draw(statsTable, options);
		  }

		function buildCompanionHtml(compData) {
			//need this at page load and when other players join
			return '<div class=companion id=player'+compData['player_id']+'>\
			 			<img id=avatar src="/src/img/player_imgs/'+compData['img']+'">\
			 			<h3 id=name class=compName>'+compData['player_name']+'</h3>\
			 			<p id=status class=status>'+compData['status']+'</p>\
						<progress id="health" value="'+compData['LE']+'" max="100"></progress>\
			 		</div>';

		}

		function buildItemHtml(items) {
			//only called when adding an item
			//itterate through players
			//player array
			var optHtml = '';
			$.each(items,function (key,val) {
				$.each(currentPlayers, function( key, value ) {
				  optHtml += '<option data-img-src="/src/img/player_imgs/'+value[0]+'" value="'+ key + '">'+ value[1] +'</option>';
				});
					//build this for each item 
				html = '<li class=equipment'+val['item_id']+'>\
							<img src="/src/img/item_imgs/unknown.svg"><span class=name>'+ val['item_name'] +'</span><span class=mod>'+ val['mod_value'] + val['mod_type'] +'</span><p>'+ val['item_desc'] +'</p>\
								<div id=actionMenu>\
									<input type="button" name="btn_use" value="Use" onclick="itemAction('+ val['trx_id'] + ',' + val['player_id']+ ',' +val['item_id'] + ', \'use\')">\
									<input type="button" name="btn_give" value="Give" onclick="itemAction('+ val['trx_id'] + ',' + val['player_id']+ ',' +val['item_id'] +', \'give\')">\
									<input type="button" name="btn_drop" value="Drop" onclick="itemAction('+ val['trx_id'] + ',' + val['player_id']+ ',' +val['item_id'] + ', \'drop\')">\
								</div>\
								<div id=targetsMenu-'+ val['item_id'] +' style="display:none;">\
								<select  data-limit="'+ val['number_of_targets'] + '" multiple="multiple">';
				html += optHtml; //new items will result in optHtml, but items at load will not. Will generate optHtml as players join
				html += '		</select>\
								<img src="/src/img/item_imgs/cancel.svg">\
								<img src="/src/img/item_imgs/thumb-up.svg">\
								</div>\
							</li>';
				//append to backpack
				$('ul.equipment').append(html);
				});
		}


		function addPlayerToItems(player) {
			html = '<option data-img-src="/src/img/player_imgs/'+ player['img'] +
					'" value="'+ player['player_id'] + '">'+player['player_name']+'</option>';
				$('select').append(html);
			$("select").imagepicker()
		}

		function getPlayers(which) {
			
			return players;
		}

		function updatePlayer(stats) {
			var player = '#player' + stats['player_id'];
			$(player +' #avatar').attr("src", '/src/img/player_imgs/'+stats['img']);
			$(player +' #health').attr("value", stats['LE']);
	  		$(player +' .status').html(stats['status']);//set the description
			$(player +' .name').html(stats['player_name']);//set the name
	  		$(player +' .info p').html(stats['info']);//set the description
	  		if(stats['player_id']==profile['player_id']){
	  			$('#pmStat').html(stats['PM']);//set the modifers
				$('#mmStat').html(stats['MM']);//set the modifers
				$('#smStat').html(stats['SM']);//set the modifers
	  		}
		}

		function itemAction(trxId,playerId,itemId,action) {
			var itemKey = {
				trx_id:trxId,
				player_id:playerId,
				item_id:itemId
			};
	          	switch(action){
	          		case 'use':
			    	console.log('using:'+JSON.stringify(itemKey));
			        $("#targetsMenu-"+itemId).toggle(); //show the selection list
			        break;
			    case 'give':
			    	console.log('giving:'+JSON.stringify(itemKey));
			        $("#targetsMenu-"+itemId).toggle(); //show the selection list
			        break;
			    case 'drop':
			    	//drop
			    	console.log('dropping:'+JSON.stringify(itemKey));
			        socket.emit('dropped item', profile, itemKey);
			        $('.equipment'+itemId).remove();
			        break;
			    default:
			        console.log('cant do ' + action);

	          	}
	          }

	    function targetPlayer(code) {
	    	var inputs = code.split("-");
	    	var item = 	inputs[0];
	    	var action=inputs[1];
	    	var player=inputs[2];
	    	//store target in array
	    	//decrement total targets available
	    	//
	          	if(player = 'no'){
	          		$("#targetsMenu-"+item).toggle(); 
	          		//clear array
	          	}
	          	if(player = 'yes'){
	          		socket.emit('')
	          		$("#targetsMenu-"+item).toggle(); 

	          	}
	    }

	    $(document).ready(function(){
	    	   var thisPlayer = document.getElementById('thisPlayer');
        	   thisPlayer.id = 'player'+profile['player_id'];
        	   socket.on('heres your items', function (items) {
	        	   	buildItemHtml(items);
        	   		//get players after items
        	   		//get other players
	         		 socket.emit('whos playing',{user_id:profile['user_id'],player_id:profile['player_id']});
        	   })
	          
	          //listen for stats
	          socket.on('heres your stats', function (data) {
	          		console.log(JSON.stringify(data));
	          		updatePlayer(data);
	          		updateGTable(parseStats(data));
	          });
	          //listen for party members
	          //
	          socket.on('player joined the party', function (player) {
	          	if(!$(compId).length){ //only add new players
	          		var compId = '#player'+player['player_id'];
	          		$('#party').append(buildCompanionHtml(player));
	          		addPlayerToItems(player);
	          		currentPlayers[player['player_id']] = [player['player_name'],player['img']] ;
	          	}
	          });

	          socket.on('player left party', function (player_id) {
	          	//iterate through the items currently there
	          	console.log('pid:'+player_id);
	          	var compId = '#player'+player_id;
	          		$(compId).slideUp("slow");
	          		$(compId).remove();
	          		delete currentPlayers[compId];
	          });

	          socket.on('feed updated', function (html) {
	          	$('#news').prepend(html);
				if ( $( "#item:first" ).is( ":hidden" ) ) {
				    $( "#item" ).slideDown( "slow" );
				  } 
	          });

	          socket.on('player updated', function (stats) {
	          	updatePlayer(stats);
	          });
	          
	    });
    </script>

	
<body>
	<div id=party>
		<div id=thisPlayer class=profile>
			<img id=avatar src="/src/img/player_imgs/unknown.png" alt="Avatar">
			<div id=info class="info">
			    <h2 id=name class=name><b><%= playerName %></b></h2> 
			    <p>Loading info</p> 
			<progress id="health" value="100" max="100"></progress>
			</div>
		</div>
		<!-- party members get appended, first come first serve -->
	</div>
	<div id=feed>
		<div class='stats'>
 		<div id=modifiers> <!--http://game-icons.net/-->
 			<ul class=modTotals>
	 			<li><img src="/src/img/biceps.svg"><span id=pmStat>15</span></li>
	 			<li><img src="/src/img/coma.svg"><span id=mmStat>4</span></li>
	 			<li><img src="/src/img/magic-palm.svg"><span id=smStat>2</span></li>
 			</ul>
 		</div>
 		<div id=chartContainer>
 		</div>
 		<div id=news>
 			<div id=item>
 				<p>Welcome!</p>
 			</div>
 			<div id=item>
 				<p>Init!</p>
 			</div>

 		</div>
 	</div>

	</div>
	<div id=backpack>
		<ul class='equipment'>
			<li class=equipment>
			<img src="/src/img/item_imgs/unknown.svg"><span class=name>sword</span><span class=mod>+3p</span><p></p>
				<div id=actionMenu>
					<input id="1" type="button" name="btn_use" value="Use" onclick="itemAction(this.id,'use')">
					<input id="2" type="button" name="btn_give" value="Give" onclick="itemAction(this.id,'give')">
					<input id="3" type="button" name="btn_drop" value="Drop" onclick="itemAction(this.id, 'drop')">
				</div>
				<div id=targetsMenu>
				<select  data-limit="2" multiple="multiple">
				</select>
				<img src="/src/img/item_imgs/cancel.svg">
				<img src="/src/img/item_imgs/thumb-up.svg">
				</div>
			</li>
			<!--<li><img src="/src/img/item_imgs/unknown.svg"><span class=name>sword</span><span class=mod>+3p</span><p></p></li>
			<li><img src="/src/img/item_imgs/unknown.svg"><span class=name>sword</span><span class=mod>+3p</span><p></p></li>-->
			
		</ul>
		<ul class='items'>
			<li><img src="/src/img/item_imgs/unknown.svg"><span class=name>potion</span><span class=effect></span></li>
			<li><img src="/src/img/item_imgs/unknown.svg"><span class=name>potion</span><span class=effect></span></li>
			<li><img src="/src/img/item_imgs/unknown.svg"><span class=name>umbrella</span><span class=effect></span></li>
			<li><img src="/src/img/item_imgs/unknown.svg"><span class=name>cat toy</span><span class=effect></span></li>
			<li><img src="/src/img/item_imgs/unknown.svg"><span class=name>pumpkin skin</span><span class=effect></span></li>
		</ul>
	</div>


 	
</body>
</html>